(define (->string el) "converts almost any element to a string;"
  (cond
    ((nil? el) "")
    ((hash-map? el)
      (let ((s (hash:keys-reduce (lambda (acc x) (++ acc (->string x) ": " (->string (el x)) ", ")) "{" el)))
        (++ (substring s 0 (- (length s) 2)) "}")))
    ((string? el) (++ "\"" el "\""))
    ((number? el) (number->string el))
    ((list? el)
      (if (null? el)
        "[]"
        (++ "[" (reduce (lambda (acc x) (++ acc ", " (->string x))) (->string (head el)) (tail el)) "]")))
    ((vector? el)
      (if (vector:empty? el)
        "{}"
        (++ "{"
            (vector:reduce (lambda (acc x) (++ acc ", " (->string x))) (->string (vector:head el)) (vector:tail el)) 
            "}")))
    ((simple-list? el)
      (let ((el (from-simple-list el)))
        (if (null? el)
          "simple[]"
          (++ "simple["
              (reduce (lambda (acc x) (++ acc ", " (->string x))) (->string (head el)) (tail el))
              "]"))))
    ((byte-vector? el)
      (if (byte-vector:empty? el)
        "byte{}"
        (++ "byte{"
            (byte-vector:reduce
              (lambda (acc x) (++ acc ", " (->string x)))
              (->string (byte-vector:head el))
              (byte-vector:tail el))
            "}")))
    ((or (atom? el) (symbol? el)) (symbol->string el))
    ((port? el) "<port>")
    ((char? el) (string el))
    ((boolean? el) (if el "true" "false"))
    (else "???")))
