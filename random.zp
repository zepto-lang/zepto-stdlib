;; This code is taken from:
;; http://stackoverflow.com/questions/14674165/scheme-generate-random
;; It is not to be used in cryptography or related fields.
(define random
  (let ((a 69069.0) (c 1) (m (expt 2 32)) (seed 19380110))
    (lambda new-seed
      (begin
        (if (and (not (null? new-seed)) (number? (car new-seed)))
          (set! seed (car new-seed))
          (set! seed (modulo (+ (* seed a) c) m)))
        (/. seed m)))))


(define (randint . args) "generate a random integer between the given args (the lower range is optional)"
  (cond ((= (length args) 1) (randint 0 (car args)))
        ((= (length args) 2)
         (+ (car args) (floor (* (random) (- (cadr args) (car args))))))
        (else (error "randint" "usage: (randint [lo] hi)"))))

(define (random-list n lo . hi)
  "generate a list of random integers between the given args (the lower range is optional)"
  (if (< n 1)
    '()
    (if (truthy? hi)
      (++ (list (randint lo (car hi))) (random-list (- n 1) lo (car hi)))
      (++ (list (randint lo)) (random-list (- n 1) lo)))))

; This has been taken from https://github.com/ashinn/chibi-scheme/blob/23ac772e3ac347d01647952621fbc83b4293448b/lib/chibi/math/prime.scm
(define (random-prime lo hi)
  "Returns a random prime between lo (inclusive) and hi (exclusive)."
  (if (> lo hi)
      (error "random-prime" "bad range: " lo hi))
  (let* ((n (bitwise-or 1 (+ lo (randint (- hi lo)))))
         (x (math:prime-above n hi)))
        (if (truthy? x)
          x
          (math:prime-above lo n))))

(define (random-prime-distinct-from lo hi p)
  "Variant of random-prime which ensures the result is
   istinct from p."
  (let ((q (random-prime lo hi)))
    (if (= q p)
        (random-prime-distinct-from lo hi p)
        q)))
