(define (id obj) "returns an object"
  obj)

(define (inf? obj) "ist object infinite?"
  (if (and (number? obj) (inexact? obj))
    (= obj (* obj 10))
    #f))

(define (flip func) "flips two arguments for a function"
  (lambda (arg1 arg2)
    (func arg2 arg1)))

(define (curry f . y) "curry a function"
  (lambda z
    (apply f (++ y z))))

(define (compose f g) "compose two functions"
  (lambda (arg)
    (f (apply g arg))))

(define (foldr func end l) "fold right"
  (if (null? l)
    end
    (func (car l) (foldr func end (cdr l)))))

(define (foldr1 func l) "fold right, assume first element is accumulator"
  (foldr func (car l) (cdr l)))

(define (foldl1 func l) "fold left, assume first element is accumulator"
  (foldl func (car l) (cdr l)))

(define (sum . l) "sum of values"
  (fold + 0 l))

(define (product . l) "product of values"
  (fold * 1 l))

(define (case x . cs) 
         if (null? cs)
            ("No Case Found")
            (if (== x (caar cs))  
                (cadar cs) 
                (unpack case (join (list x) (cdr cs)))))

(define (unzip1-with-cdr . lists)
  (unzip1-with-cdr-iterative lists '() '()))

(define (unzip1-with-cdr-iterative lists cars cdrs)
  (if (null? lists)
      (cons cars cdrs)
      (let ((car1 (caar lists))
        (cdr1 (cdar lists)))
    (unzip1-with-cdr-iterative 
     (cdr lists) 
     (append cars car1)
     (append cdrs cdr1)))))

(define (for-each proc . lists) "applies a function to a bunch of arguments"
  (if (null? lists)
      #t
      (if (any? null? lists)
        #t
        (let* ((unz (apply unzip1-with-cdr lists))
               (cars (car unz))
               (cdrs (cdr unz)))
          (begin
            (apply proc cars)
            (apply for-each (cons proc cdrs)))))))

(define (falsy? val) "is object falsy: empty if collection, 0 if number, #f if boolean"
  (cond
    ((boolean? val) (not val))
    ((hash-map? val) (null? (hash:keys val)))
    ((list? val) (null? val))
    ((vector? val) (eqv? {} val))
    ((byte-vector? val) (eqv? #() val))
    ((string? val) (eqv? "" val))
    ((number? val) (eqv? 0 val))
    (else #t)))

(define (truthy? val) "is object truthy: not empty if collection, !0 if number #t if boolean"
  (not (falsy? val)))
