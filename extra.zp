;; All definitions here are "borrowed" from
;; husk (github.com/justinethier/husk-scheme).
(define-syntax cond
    (syntax-rules (else =>)
        ((cond (else result1 result2 ...))
         ((lambda () result1 result2 ...))) 
        ((cond (test => result))
         (let ((temp test))
           (if (truthy? temp) (result temp))))
        ((cond (test => result) clause1 clause2 ...)
         (let ((temp test))
           (if (truthy? temp)
             (result temp)
             (cond clause1 clause2 ...))))
        ((cond (test)) test)
        ((cond (test) clause1 clause2 ...)
         (let ((temp test))
           (if temp
             temp
             (cond clause1 clause2 ...))))
        ((cond (test result1 result2 ...))
         (if test ((lambda () result1 result2 ...)))) 
        ((cond (test result1 result2 ...)
               clause1 clause2 ...)
         (if test
           ((lambda () result1 result2 ...)) 
           (cond clause1 clause2 ...)))))

(define-syntax case
  (syntax-rules (else =>)
                ((case (key ...)
                   clauses ...)
                 (let ((atom-key (key ...)))
                   (case atom-key clauses ...)))
                ((case key
                   (else => result))
                 (result key))
                ((case key
                   (else result1 result2 ...))
                 (if #t ((lambda () result1 result2 ...)))) 
                ((case key
                   ((atoms ...) result1 result2 ...))
                 (if (memv key '(atoms ...))
                   ((lambda () result1 result2 ...)))) 
                ((case key
                   ((atoms ...) => result)
                   clause clauses ...)
                 (if (memv key '(atoms ...))
                   (result key)
                   (case key clause clauses ...)))
                ((case key
                   ((atoms ...) result1 result2 ...)
                   clause clauses ...)
                 (if (memv key '(atoms ...))
                   ((lambda () result1 result2 ...)) 
                   (case key clause clauses ...)))))

(define-syntax when
  (syntax-rules ()
                ((when test result1 result2 ...)
                 (if test
                   (begin result1 result2 ...)))))

(define-syntax letrec*
  (syntax-rules ()
                ((letrec* ((var1 init1) ...) body1 body2 ...)
                 (let ((var1 #f) ...)
                   (set! var1 init1)
                   ...
                   (let () body1 body2 ...)))))

; The vanilla SRFI 16 implementation
(define-syntax case-lambda
  (syntax-rules ()
    ((case-lambda)
     (lambda args
       (error "CASE-LAMBDA without any clauses.")))
    ((case-lambda 
      (?a1 ?e1 ...) 
      ?clause1 ...)
     (lambda args
       (let ((l (length args)))
         (case-lambda "CLAUSE" args l 
           (?a1 ?e1 ...)
           ?clause1 ...))))
    ((case-lambda "CLAUSE" ?args ?l 
      ((?a1 ...) ?e1 ...) 
      ?clause1 ...)
     (if (= ?l (length '(?a1 ...)))
         (apply (lambda (?a1 ...) ?e1 ...) ?args)
         (case-lambda "CLAUSE" ?args ?l 
           ?clause1 ...)))
    ((case-lambda "CLAUSE" ?args ?l
      ((?a1 . ?ar) ?e1 ...) 
      ?clause1 ...)
     (case-lambda "IMPROPER" ?args ?l 1 (?a1 . ?ar) (?ar ?e1 ...) 
       ?clause1 ...))
    ((case-lambda "CLAUSE" ?args ?l 
      (?a1 ?e1 ...)
      ?clause1 ...)
     (let ((?a1 ?args))
       ?e1 ...))
    ((case-lambda "CLAUSE" ?args ?l)
     (error "Wrong number of arguments to CASE-LAMBDA."))
    ((case-lambda "IMPROPER" ?args ?l ?k ?al ((?a1 . ?ar) ?e1 ...)
      ?clause1 ...)
     (case-lambda "IMPROPER" ?args ?l (+ ?k 1) ?al (?ar ?e1 ...) 
      ?clause1 ...))
    ((case-lambda "IMPROPER" ?args ?l ?k ?al (?ar ?e1 ...) 
      ?clause1 ...)
     (if (>= ?l ?k)
         (apply (lambda ?al ?e1 ...) ?args)
         (case-lambda "CLAUSE" ?args ?l 
           ?clause1 ...)))))

;; These are the only homebrew definitions
(define-syntax unless
  (syntax-rules ()
                ((unless test result1 ...)
                 (if (not test)
                   result1
                   ...))))

(define-syntax for
  (syntax-rules ()
                ((for num (actions ...))
                 (do ((i 0 (+ i 1))) ((= i num)) actions ...))))

(define-syntax <|
  (syntax-rules ()
    ((<| x) (x))
    ((<| x y) (x (y)))
    ((<| x y ...)
     (x (<| y ...)))))


(define (|> y . x)
  (define (all-but acc l)
            (if (null? (cdr l))
              acc
              (all-but (+= acc (car l)) (cdr l))))
  (if (null? x)
    (y)
    ((list:last x) (apply |> (cons y (all-but [] x))))))

(define-syntax receive
  (syntax-rules ()
    ((receive formals expression body ...)
      (call-with-values (lambda () expression)
                        (lambda formals body ...)))))

(define-syntax comment
  (syntax-rules ()
    ((_ ...) (nil))))

(define (zepto:get-bindings str) "get the bindings that match the prefix"
  (hash:kv-reduce (lambda (acc kv) (if (string:starts-with (car kv) str) (+= acc kv) acc))
                  []
                  (env->hashmap (current-env))))

(define-syntax forever
  (syntax-rules ()
    ((_ body ...)
      (letrec ((forever-fun (lambda () (begin body ... (forever-fun)))))
        (forever-fun)))))

(define-syntax λ
  (syntax-rules ()
    ((_ args body)
      (lambda args body))))

(define-syntax ƒ
  (syntax-rules ()
    ((_ args body)
      (if (list? 'args)
        (define args body)
        (error "function head must be a list, was" 'args)))))
