(defprotocol equality (equal? 2))
(defimpl equality vector? ((equal? eq?)))
(defimpl equality byte-vector? ((equal? eq?)))
(defimpl equality list? ((equal? eq?)))
(defimpl equality simple-list? ((equal? eq?)))
(defimpl equality hash-map? ((equal? eq?)))
(defimpl equality string? ((equal? eq?)))
(defimpl equality number? ((equal? =)))
(defimpl equality boolean? ((equal? eq?)))
(defimpl equality port? ((equal? eq?)))
(defimpl equality symbol? ((equal? eq?)))

(defprotocol ord (compare 2))
(defimpl ord number? ((compare (lambda (a b) (if (= a b)
                                                0
                                                (if (< a b) -1 1))))))
(defimpl ord char? ((compare (lambda (a b) (if (char=? a b)
                                              0
                                              (if (char<? a b) -1 1))))))
(defimpl ord string? ((compare (lambda (a b)
                                  (cond ((null? a) -1)
                                        ((null? b) 1)
                                        (else (compare (car a) (car b))))))))

(define (lt a b)
  "a less-than function using the <fun>equality?</fun> protocol.

   params:
    - a: the first operand
    - b: the second operand
   complexity: derived by <fun>compare</fun>
   returns: a boolean"
  (eq? (compare a b) -1))
(define (gt a b)
  "a greater-than function using the <fun>equality?</fun> protocol.

   params:
    - a: the first operand
    - b: the second operand
   complexity: derived by <fun>compare</fun>
   returns: a boolean"
  (eq? (compare a b) 1))
(define (eq a b)
  "an equality function using the <fun>equality?</fun> protocol.

   params:
    - a: the first operand
    - b: the second operand
   complexity: derived by <fun>compare</fun>
   returns: a boolean"
  (eq? (compare a b) 0))
(define (ge a b)
  "a greater-than-or-equal function using the <fun>equality?</fun> protocol.

   params:
    - a: the first operand
    - b: the second operand
   complexity: derived by <fun>compare</fun>
   returns: a boolean"
  (or (eq? (compare a b) 0) (eq? (compare a b) 1)))
(define (le a b)
  "a less-than-or-equal function using the <fun>equality?</fun> protocol.

   params:
    - a: the first operand
    - b: the second operand
   complexity: derived by <fun>compare</fun>
   returns: a boolean"
  (or (eq? (compare a b) 0) (eq? (compare a b) -1)))
