(defprotocol equality (equal? 2))
(defimpl equality vector? ((equal? eq?)))
(defimpl equality byte-vector? ((equal? eq?)))
(defimpl equality list? ((equal? eq?)))
(defimpl equality simple-list? ((equal? eq?)))
(defimpl equality hash-map? ((equal? eq?)))
(defimpl equality string? ((equal? eq?)))
(defimpl equality number? ((equal? =)))
(defimpl equality boolean? ((equal? eq?)))
(defimpl equality port? ((equal? eq?)))
(defimpl equality symbol? ((equal? eq?)))

(defprotocol ord (compare 2))
(defimpl ord number? ((compare (lambda (a b) (if (= a b) 0 (if (< a b) -1 1))))))

(define (lt a b) (eq? (compare a b) -1))
(define (gt a b) (eq? (compare a b) 1))
(define (eq a b) (eq? (compare a b) 0))
(define (ge a b) (or (eq? (compare a b) 0) (eq? (compare a b) 1)))
(define (le a b) (or (eq? (compare a b) 0) (eq? (compare a b) -1)))
