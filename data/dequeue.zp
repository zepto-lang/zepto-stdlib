(load "data/stream")

(define-struct dequeue (f lenf r lenr))

(defprotocol dequeue (empty? 1) (qcons 2) (snoc 2) (qhead 1) (qtail 1) (qlast 1))

(define (dequeue q)
  (if (<= (dequeue:get-lenr q) (dequeue:get-lenf q))
    q
    (dequeue:make-dequeue (append (dequeue:get-f q) (stream:reverse (stream:cdr (dequeue:get-r q))))
                      (+ (dequeue:get-lenf q) (dequeue:get-lenr q) -1)
                      (stream:cons (stream:car (dequeue:get-r q)) (stream:empty))
                      1)))

(define (dequeue:empty)
  (dequeue:make-dequeue (stream:empty) 0 (stream:empty) 0))

(defimpl dequeue dequeue:dequeue?
  ((empty? (lambda (x) (and (eq? (dequeue:get-f x) (stream:empty))
                            (eq? (dequeue:get-r x) (stream:empty)))))
   (qcons (lambda (x y)
        (dequeue (dequeue:make-dequeue (append (dequeue:get-f x) y) (add1 (dequeue:get-lenf x))
                                       (dequeue:get-r x) (dequeue:get-lenr x)))))
   (snoc (lambda (x y)
        (dequeue (dequeue:make-dequeue (dequeue:get-f x) (dequeue:get-lenf x)
                                       (stream:cons y (dequeue:get-r x)) (add1 (dequeue:get-lenr x))))))
   (qhead (lambda (x)
        (if (null? (force (stream:get-list (dequeue:get-f x))))
          (stream:car (dequeue:get-r x))
          (stream:car (dequeue:get-f x)))))
   (qtail (lambda (x)
        (if (null? (force (stream:get-list (dequeue:get-f x))))
          (dequeue:empty)
          (dequeue (dequeue:make-dequeue (stream:cdr (dequeue:get-f x)) (sub1 (dequeue:get-lenf x))
                                         (dequeue:get-r x) (dequeue:get-lenr x))))))
   (qlast (lambda (x) (stream:car (dequeue:get-r x))))))
