(define-struct stream (l))

(define (stream:empty) (stream:make-stream (delay [])))

(define (stream:empty? stream) (list:null? (force (stream:get-l stream))))

(define-syntax stream:cons
  (syntax-rules ()
    ((_ elem stream)
      (stream:make-stream (delay (cons elem (stream:get-l stream)))))))

(define (stream:reverse stream) "reverse the stream"
  (define (internal l r)
    (if (null? l)
      r
      (internal (cdr l) (stream:cons (car l) r))))
  (internal stream (stream:empty)))

(defimpl stringify stream:stream?
         ((->string (lambda (stream) "<stream>"))))
(defimpl traversable-collec stream:stream?
         ((car   (lambda (stream) (list:car (force (stream:get-l stream)))))
          (cdr   (lambda (stream) (stream:make-stream (list:cdr (force (stream:get-l stream))))))
          (null? stream:empty?)))
